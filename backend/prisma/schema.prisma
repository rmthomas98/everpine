// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(cuid())
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  name                   String?
  email                  String        @unique
  password               String
  isEmailVerified        Boolean       @default(false)
  emailVerificationToken String?       @unique
  teams                  Team[]
  roles                  Role[]
  subscription           Subscription? @relation(fields: [subscriptionId], references: [id]) // for the users that have their own subscriptions so they can create their own teams if they want
  subscriptionId         String?
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  NEW_USER
  TRIAL
}

model Subscription {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  trialEndDate         Int? // timestamp
  hasPaymentMethod     Boolean            @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionStatus   SubscriptionStatus @default(NEW_USER)
  latestInvoiceId      String? // get from payment failed webhook so when user updates payment method, we can retry the payment
  cancelAtPeriodEnd    Boolean            @default(false)
  teams                Team[]
  users                User[]
}

model Team {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id]) // will belong to the team owner (super admin)
  subscriptionId String?
  users          User[]
  roles          Role[]
}

enum Roles {
  SUPER_ADMIN // team owner (ownly can be one)
  ADMIN // can do everything except changing subscription (can be multiple)
  EDITOR // can create and edit the data (no team management)
  READ_ONLY // can only view the data (can't see the team, only qr codes and links)
}

model Role {
  id     String @id @default(cuid())
  role   Roles  @default(SUPER_ADMIN)
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}
