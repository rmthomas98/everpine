// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  name                   String?
  email                  String         @unique
  avatar                 String?
  password               String?
  resetPasswordToken     String?
  allowGoogleAuth        Boolean        @default(true)
  allowCredentialsAuth   Boolean        @default(true)
  isTwoFactorAuthEnabled Boolean        @default(false)
  twoFactorAuthSecret    String?
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?        @unique
  defaultTeamId          String?
  stripeCustomerId       String?
  allowCriticalNotifs    Boolean        @default(true)
  allowProductNotifs     Boolean        @default(true)
  allowMarketingNotifs   Boolean        @default(true)
  teams                  Team[]
  roles                  Role[]
  subscriptions          Subscription[]
  invites                Invite[]
}

enum Plan {
  FREE // automatically assigned when user signs up and doesn't select a plan or selects free plan
  PROFESSIONAL
  BUSINESS
  ENTERPRISE
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}

enum BillingCycle {
  MONTH
  ANNUAL
}

// this subsciption will belong to the team owner (super admin)
// and will be attached to the team, so all the users in the team will have the same subscription
// the team will use the subscription to get the plan and the status
model Subscription {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  createdBy            User               @relation(fields: [createdById], references: [id])
  createdById          String
  status               SubscriptionStatus @default(ACTIVE)
  plan                 Plan               @default(FREE)
  billingCycle         BillingCycle
  stripeSubscriptionId String?
  failedInvoiceId      String? // get from payment failed webhook so when user updates payment method, we can retry the payment
  cancelAtPeriodEnd    Boolean            @default(false)
  team                 Team?
}

model Team {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  createdById      String // user id of the person that created the team (used when subscription is canceld and we have to choose who to maek inactive)
  name             String
  slug             String        @unique
  company          String?
  emailInvoiceTo   String?
  avatar           String?
  plan             Plan          @default(FREE)
  stripeCustomerId String?
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId   String?       @unique
  users            User[]
  roles            Role[]
  invites          Invite[]
}

enum Roles {
  OWNER // team owner (can be multiple)
  MEMBER // can create and edit the data (no team management)
  VIEWER // can only view the data (can't see the team management)
}

model Role {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Roles    @default(OWNER)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  isActive  Boolean  @default(true) // if false, the user can't access the team. only to be used when the user can't be active because the subscription is canceled or limited to a certain number of users
}

model Invite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  token     String   @unique
  role      Roles
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
}
