// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  name                   String?
  email                  String         @unique
  password               String?
  sub                    String?        @unique // if google login, this will be the google sub
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?        @unique
  stripeCustomerId       String?
  defaultTeamId          String?
  teams                  Team[]
  roles                  Role[]
  subscriptions          Subscription[]
}

enum Plan {
  FREE // automatically assigned when user signs up and doesn't select a plan or selects free plan
  PROFESSIONAL
  BUSINESS
  ENTERPRISE
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}

// this subsciption will belong to the team owner (super admin)
// and will be attached to the team, so all the users in the team will have the same subscription
// the team will use the subscription to get the plan and the status
model Subscription {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  createdBy            User               @relation(fields: [createdById], references: [id])
  createdById          String
  status               SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  failedInvoiceId      String? // get from payment failed webhook so when user updates payment method, we can retry the payment
  cancelAtPeriodEnd    Boolean            @default(false)
  team                 Team?
}

model Team {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  plan           Plan          @default(FREE)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique
  users          User[]
  roles          Role[]
}

enum Roles {
  OWNER // team owner (can be multiple)
  SUPER_ADMIN // can do everything (can be multiple)
  ADMIN // can do everything except changing subscription (can be multiple)
  MEMBER // can create and edit the data (no team management)
  VIEWER // can only view the data (can't see the team, only qr codes and links)
  INVITED // invited to join the team but hasn't accepted the invitation yet
  INACTIVE // removed from the team
}

model Role {
  id     String @id @default(cuid())
  role   Roles  @default(OWNER)
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
}
